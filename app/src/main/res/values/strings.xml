<resources>
    <string name="app_name">MyAppplication2</string>
    <string name="padding">Padding</string>
    <string name="flex">Flex</string>
    <string name="large_text">Most web pages are written in a combination of HTML (Hypertext Markup Language) and CSS (Cascading Style Sheets). In short, HTML specifies the content and logical structure of the page, while the CSS specifies how it looks: its colors, fonts, formatting, layout, and styling.

CSS flex-box layout is a particular way to specify the layout of HTML pages.

One of the most defining features of the flex layout is its ability to form-fit, based on its viewing environment. Flex boxes can adjust in sizeâ€”either decreasing, to avoid unnecessarily monopolizing space, or increasing to make room for contents to be constrained within its boundaries. Moreover, the flex layout is less restrictive in terms of content flow than those, for example, of the block and inline display types, which are generally uni-directional. The flex directional flow can be specified as rightwards, leftwards, upwards, or downwards. Individual items within a flex container may also be automatically reordered and rearranged to suit the available layout space
    The following terms are associated with the flexbox layout model.

Flex container
Parent element that holds all flex items. Using the CSS display property, the container can be defined as either flex or inline-flex.
Flex item
Any direct child element held within the flex container is considered a flex item. Any text within the container element is wrapped in an unknown flex item.
Axes
Each flex box contains two axes: the main and cross axes. The main axis is the axis on which the items align with each other. The cross axis is perpendicular to the main axis.
Flex-direction
Establishes main axis. Possible arguments: row (default), row-reverse, column, column-reverse.
Justify-content
Determines how content gets placed on the main axis on the current line. Optional arguments: left, right, center, space-between, space-around.
Align-items
Determines the default for how flex items get placed on the cross axis on each line.
Align-content
Determines the default for how cross axis lines are aligned.
Align-self
Determines how a single item is placed along the cross axis. This overrides any defaults set by align-items.
Directions
cross-start
cross-end
The cross-start/cross-end sides determine where flex lines get filled with flex items from cross-start to cross-end.
main-start
main-end
The main-start/main-end sides determine where to start placing flex items within the flex container, starting from the main-start end and going to the main-end end.
Order
Places elements in groups and determines which order they are to be placed in within the container.
Flex-flow
Shorthands flex-direction and flex-wrap to place the flex content.
    </string>
</resources>